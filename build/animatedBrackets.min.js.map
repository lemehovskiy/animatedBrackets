{"version":3,"sources":["animatedBrackets.es6"],"names":["$","fn","animatedBrackets","options","draw_polyline","settings","element","points","points_str","forEach","item","element_width","element_height","attr","color","stroke_width","extend","duration","delay","this","each","animate_brackets","timeline","staggerTo","$this","find","stroke-dashoffset","draw_brackets","brackets_config","bracket","$this_width","$this_height","is_animated","set_dash","is_inited","get","getTotalLength","svgElement","document","createElementNS","TimelineLite","brackets_points","split","bracket_points_arr","push","append","css","position","width","height","left","top","overflow","window","on","outerWidth","outerHeight","isOnScreen","x","y","win","viewport","scrollTop","scrollLeft","right","bottom","bounds","offset","deltas","Math","min","jQuery"],"mappings":"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","file":"animatedBrackets.min.js","sourcesContent":["/*\n\n animatedBrackets\n\n Author: lemehovskiy\n\n */\n\n(function ($) {\n\n    $.fn.animatedBrackets = function (options) {\n\n        let settings = $.extend({\n            points: [\n                '0 20, 0 0, 100 0, 100 20',\n                '100 80, 100 100, 0 100, 0 80'\n            ],\n            color: '#ffffff',\n            stroke_width: 10,\n            duration: 1,\n            delay: 1\n        }, options);\n\n\n        $(this).each(function () {\n\n            let $this = $(this),\n                $this_width = 0,\n                $this_height = 0,\n\n                brackets_config = [],\n\n                is_inited = false,\n                is_animated = false,\n\n                svgElement = $(document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\")),\n\n                timeline = new TimelineLite();\n\n            //generate brackets config\n            settings.points.forEach(function (points_str) {\n\n                let brackets_points = points_str.split(', ');\n\n                let bracket_points_arr = [];\n\n                brackets_points.forEach(function (item) {\n\n                    bracket_points_arr.push(item.split(' '));\n\n                });\n\n                brackets_config.push({points: bracket_points_arr});\n            });\n\n            $this.append(svgElement);\n\n            $this.css({\n                position: 'relative'\n            });\n\n            svgElement.css({\n                width: '100%',\n                height: '100%',\n                position: 'absolute',\n                left: 0,\n                top: 0,\n                overflow: 'visible'\n            });\n\n\n            brackets_config.forEach(function (bracket) {\n\n                bracket.element = $(document.createElementNS(\"http://www.w3.org/2000/svg\", 'polyline'));\n\n                svgElement.append(bracket.element);\n\n            });\n\n            $(window).on('load resize', function () {\n                $this_width = $this.outerWidth();\n                $this_height = $this.outerHeight();\n\n                draw_brackets();\n            });\n\n            $(window).on('load scroll resize', function () {\n\n                if (is_inited && $this.isOnScreen(.5, .5) && !is_animated) {\n                    animate_brackets();\n                    is_animated = true;\n                }\n\n            });\n\n\n            function animate_brackets() {\n                timeline.staggerTo($this.find('polyline'), settings.duration, {attr: {'stroke-dashoffset': 0}}, settings.delay);\n            }\n\n            function draw_brackets() {\n\n                brackets_config.forEach(function (bracket) {\n\n                    draw_polyline({\n                        element: bracket.element,\n                        points: bracket.points,\n                        element_width: $this_width,\n                        element_height: $this_height,\n                        color: settings.color,\n                        stroke_width: settings.stroke_width\n                    });\n\n                    if (!is_animated){\n                        set_dash({\n                            element: bracket.element,\n                        });\n                    }\n\n                });\n\n                is_inited = true;\n\n            }\n\n            function set_dash(settings){\n\n                let element = settings.element;\n\n                element.attr(\"stroke-dasharray\", element.get(0).getTotalLength());\n                element.attr(\"stroke-dashoffset\", element.get(0).getTotalLength());\n            }\n\n        });\n\n\n        function draw_polyline(settings) {\n\n            let element = settings.element;\n\n            let points = settings.points;\n\n            let points_str = '';\n\n            points.forEach(function (item) {\n                points_str += settings.element_width / 100 * item[0] + \", \" + settings.element_height / 100 * item[1] + \" \"\n            });\n\n            element.attr(\"points\", points_str);\n\n            element.attr(\"style\", \"stroke:\"+settings.color+\"; stroke-width:\" + settings.stroke_width + \"; fill:none\"); //Set path's data\n\n\n\n        }\n\n    };\n\n    $.fn.isOnScreen = function (x, y) {\n\n        if (x == null || typeof x == 'undefined') x = 1;\n        if (y == null || typeof y == 'undefined') y = 1;\n\n        var win = $(window);\n\n        var viewport = {\n            top: win.scrollTop(),\n            left: win.scrollLeft()\n        };\n        viewport.right = viewport.left + win.width();\n        viewport.bottom = viewport.top + win.height();\n\n        var height = this.outerHeight();\n        var width = this.outerWidth();\n\n        if (!width || !height) {\n            return false;\n        }\n\n        var bounds = this.offset();\n        bounds.right = bounds.left + width;\n        bounds.bottom = bounds.top + height;\n\n        var visible = (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));\n\n        if (!visible) {\n            return false;\n        }\n\n        var deltas = {\n            top: Math.min(1, ( bounds.bottom - viewport.top ) / height),\n            bottom: Math.min(1, ( viewport.bottom - bounds.top ) / height),\n            left: Math.min(1, ( bounds.right - viewport.left ) / width),\n            right: Math.min(1, ( viewport.right - bounds.left ) / width)\n        };\n\n        return (deltas.left * deltas.right) >= x && (deltas.top * deltas.bottom) >= y;\n\n    };\n\n})(jQuery);"]}