{"version":3,"sources":["animatedBrackets.es6"],"names":["factory","define","amd","exports","module","require","jQuery","$","fn","animatedBrackets","options","get_path_length","path","totalLength","prevPos","polyline","i","points","numberOfItems","pos","getItem","Math","sqrt","pow","x","y","draw_polyline","settings","element","points_str","forEach","item","element_width","element_height","attr","color","stroke_width","extend","duration","delay","this","each","animate_brackets","timeline","staggerTo","$this","find","stroke-dashoffset","draw_brackets","brackets_config","bracket","$this_width","$this_height","is_animated","set_dash","is_inited","length","get","svgElement","document","createElementNS","TimelineLite","brackets_points","split","bracket_points_arr","push","append","css","position","width","height","left","top","overflow","window","on","outerWidth","outerHeight","isOnScreen","win","viewport","scrollTop","scrollLeft","right","bottom","bounds","offset","deltas","min"],"mappings":"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","file":"animatedBrackets.min.js","sourcesContent":["/*\n\n animatedBrackets\n\n Author: lemehovskiy\n\n */\n\n;(function (factory) {\n    'use strict';\n\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof exports !== 'undefined') {\n        module.exports = factory(require('jquery'));\n    } else {\n        factory(jQuery);\n    }\n})\n(function ($) {\n\n    $.fn.animatedBrackets = function (options) {\n\n        let settings = $.extend({\n            points: [\n                '0 20, 0 0, 100 0, 100 20',\n                '100 80, 100 100, 0 100, 0 80'\n            ],\n            color: '#ffffff',\n            stroke_width: 10,\n            duration: 1,\n            delay: 1\n        }, options);\n\n\n        function get_path_length(path) {\n\n            let totalLength = 0;\n            let prevPos;\n            let polyline = path;\n            for (let i = 0; i < polyline.points.numberOfItems; i++) {\n                let pos = polyline.points.getItem(i);\n                if (i > 0) {\n                    totalLength += Math.sqrt(Math.pow((pos.x - prevPos.x), 2) + Math.pow((pos.y - prevPos.y), 2));\n                }\n                prevPos = pos;\n            }\n\n            return totalLength;\n        }\n\n\n        $(this).each(function () {\n\n            let $this = $(this),\n                $this_width = 0,\n                $this_height = 0,\n\n                brackets_config = [],\n\n                is_inited = false,\n                is_animated = false,\n\n                svgElement = $(document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\")),\n\n                timeline = new TimelineLite();\n\n            //generate brackets config\n            settings.points.forEach(function (points_str) {\n\n                let brackets_points = points_str.split(', ');\n\n                let bracket_points_arr = [];\n\n                brackets_points.forEach(function (item) {\n\n                    bracket_points_arr.push(item.split(' '));\n\n                });\n\n                brackets_config.push({points: bracket_points_arr});\n            });\n\n            $this.append(svgElement);\n\n            $this.css({\n                position: 'relative'\n            });\n\n            svgElement.css({\n                width: '100%',\n                height: '100%',\n                position: 'absolute',\n                left: 0,\n                top: 0,\n                overflow: 'visible'\n            });\n\n\n            brackets_config.forEach(function (bracket) {\n\n                bracket.element = $(document.createElementNS(\"http://www.w3.org/2000/svg\", 'polyline'));\n\n                svgElement.append(bracket.element);\n\n            });\n\n            $(window).on('load resize', function () {\n                $this_width = $this.outerWidth();\n                $this_height = $this.outerHeight();\n\n                draw_brackets();\n            });\n\n            $(window).on('load scroll resize', function () {\n\n                if (is_inited && $this.isOnScreen(.5, .5) && !is_animated) {\n                    animate_brackets();\n                    is_animated = true;\n                }\n\n            });\n\n\n            function animate_brackets() {\n                timeline.staggerTo($this.find('polyline'), settings.duration, {attr: {'stroke-dashoffset': 0}}, settings.delay);\n            }\n\n            function draw_brackets() {\n\n                brackets_config.forEach(function (bracket) {\n\n                    draw_polyline({\n                        element: bracket.element,\n                        points: bracket.points,\n                        element_width: $this_width,\n                        element_height: $this_height,\n                        color: settings.color,\n                        stroke_width: settings.stroke_width\n                    });\n\n                    if (!is_animated) {\n                        set_dash({\n                            element: bracket.element,\n                        });\n                    }\n\n                });\n\n                is_inited = true;\n\n            }\n\n            function set_dash(settings) {\n\n                let element = settings.element;\n\n                let length = get_path_length(element.get(0));\n\n                element.attr(\"stroke-dasharray\", length);\n                element.attr(\"stroke-dashoffset\", length);\n            }\n\n        });\n\n\n        function draw_polyline(settings) {\n\n            let element = settings.element;\n\n            let points = settings.points;\n\n            let points_str = '';\n\n            points.forEach(function (item) {\n                points_str += settings.element_width / 100 * item[0] + \", \" + settings.element_height / 100 * item[1] + \" \"\n            });\n\n            element.attr(\"points\", points_str);\n\n            element.attr(\"style\", \"stroke:\" + settings.color + \"; stroke-width:\" + settings.stroke_width + \"; fill:none\"); //Set path's data\n\n\n        }\n\n    };\n\n    $.fn.isOnScreen = function (x, y) {\n\n        if (x == null || typeof x == 'undefined') x = 1;\n        if (y == null || typeof y == 'undefined') y = 1;\n\n        var win = $(window);\n\n        var viewport = {\n            top: win.scrollTop(),\n            left: win.scrollLeft()\n        };\n        viewport.right = viewport.left + win.width();\n        viewport.bottom = viewport.top + win.height();\n\n        var height = this.outerHeight();\n        var width = this.outerWidth();\n\n        if (!width || !height) {\n            return false;\n        }\n\n        var bounds = this.offset();\n        bounds.right = bounds.left + width;\n        bounds.bottom = bounds.top + height;\n\n        var visible = (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));\n\n        if (!visible) {\n            return false;\n        }\n\n        var deltas = {\n            top: Math.min(1, ( bounds.bottom - viewport.top ) / height),\n            bottom: Math.min(1, ( viewport.bottom - bounds.top ) / height),\n            left: Math.min(1, ( bounds.right - viewport.left ) / width),\n            right: Math.min(1, ( viewport.right - bounds.left ) / width)\n        };\n\n        return (deltas.left * deltas.right) >= x && (deltas.top * deltas.bottom) >= y;\n\n    };\n\n});"]}